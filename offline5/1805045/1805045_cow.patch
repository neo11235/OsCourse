diff --git a/Makefile b/Makefile
index 39a99d7..f3a47cf 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,13 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_thread1\
+	$U/_thread2\
+	$U/_thread3\
+	$U/_openthread\
+	$U/_user1\
+	$U/_userforktest\
+
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..1afb15c 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -9,6 +9,8 @@ struct sleeplock;
 struct stat;
 struct superblock;
 
+
+
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -63,6 +65,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int total_free_page(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,7 +109,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
-
+uint64 numOfCowPage(struct proc* pr);
+uint64 numOfPage(struct proc* pr);
+void printpageStat(void);
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -156,6 +161,7 @@ void            uartputc_sync(int);
 int             uartgetc(void);
 
 // vm.c
+int             remapcow(pte_t* pte);
 void            kvminit(void);
 void            kvminithart(void);
 void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..0b6be30 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -8,6 +8,8 @@
 #include "spinlock.h"
 #include "riscv.h"
 #include "defs.h"
+extern int refcount[];
+extern struct spinlock reflock;
 
 void freerange(void *pa_start, void *pa_end);
 
@@ -26,7 +28,10 @@ struct {
 void
 kinit()
 {
+  initlock(&reflock,"reflock");
   initlock(&kmem.lock, "kmem");
+  for(int i=0;i<NUM_OF_PAGE;++i)
+    refcount[i]=1;
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -50,6 +55,27 @@ kfree(void *pa)
 
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
+  
+  //refcount[PINDX((uint64)pa)]=0;
+  if((uint64)pa<KERNBASE)
+    return;
+  
+  acquire(&reflock);
+  int indx=PINDX((uint64)pa);
+  if(refcount[indx]<0){
+    printf("%d: %d\n",indx,refcount[indx]);
+    panic("kfree : refcount < 0");
+  }
+  // if(refcount[indx]<0)
+  //   panic("kfree : refcount shouldnt be less than 0");
+  if(refcount[indx]>0)
+    --refcount[indx];
+  //printf("kfree %d: %d\n",indx,refcount[indx]);
+  if(refcount[indx]>0){
+    release(&reflock);
+    return;
+  }
+  release(&reflock);
 
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
@@ -62,6 +88,7 @@ kfree(void *pa)
   release(&kmem.lock);
 }
 
+void garbage_collect(){}
 // Allocate one 4096-byte page of physical memory.
 // Returns a pointer that the kernel can use.
 // Returns 0 if the memory cannot be allocated.
@@ -77,6 +104,25 @@ kalloc(void)
   release(&kmem.lock);
 
   if(r)
-    memset((char*)r, 5, PGSIZE); // fill with junk
+    memset((char*)r, 5, PGSIZE); // fill with jun
+  if((uint64)r>=KERNBASE&&(uint64)r<=PHYSTOP){
+    acquire(&reflock);
+    ++refcount[PINDX((uint64)r)];
+    release(&reflock);
+  }
   return (void*)r;
 }
+int total_free_page(void)
+{
+  struct run* r;
+  int count=0;
+  acquire(&kmem.lock);
+  r=kmem.freelist;
+  while(r)
+  {
+    ++count;
+    r=r->next;
+  }
+  release(&kmem.lock);
+  return count;
+}
\ No newline at end of file
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
index 776f98c..a748d7f 100644
--- a/kernel/memlayout.h
+++ b/kernel/memlayout.h
@@ -21,6 +21,10 @@
 #define UART0 0x10000000L
 #define UART0_IRQ 10
 
+
+#define NUM_OF_PAGE 32768
+
+
 // virtio mmio interface
 #define VIRTIO0 0x10001000
 #define VIRTIO0_IRQ 1
@@ -65,3 +69,5 @@
 //   TRAPFRAME (p->trapframe, used by the trampoline)
 //   TRAMPOLINE (the same page as in the kernel)
 #define TRAPFRAME (TRAMPOLINE - PGSIZE)
+
+#define PINDX(x) (((x)-KERNBASE)>>12)
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..aa2164e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -681,3 +681,41 @@ procdump(void)
     printf("\n");
   }
 }
+//returns number of cow pages used by current process
+uint64 numOfCowPage(struct proc* pr)
+{
+  uint64 i;
+  pte_t * pte;
+  uint64 sz=pr->sz;
+  uint64 count=0;
+  for(i=0;i<sz;i+=PGSIZE)
+  {
+    if((pte = walk(pr->pagetable, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    if(*pte & PTE_COW)
+      ++count;
+  }
+  return count;
+}
+//total number of pages used by proc
+uint64 numOfPage(struct proc* pr)
+{
+  uint64 sz=pr->sz;
+  return (sz+PGSIZE-1)/(PGSIZE);
+}
+void printpageStat(void)
+{
+  struct proc* p;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state != UNUSED)
+    {
+        printf("Process %d Total page %d Total COW page %d\n",
+        p->pid,numOfPage(p),numOfCowPage(p));
+    }
+    release(&p->lock);
+  }
+  printf("Total free page %d\n\n",total_free_page());
+}
\ No newline at end of file
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..c9939eb 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -344,6 +344,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
 
+#define PTE_COW (1L <<9) //if it is a cow page
+
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..1a4dad3 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_pagestat(void);
+extern uint64 sys_cowpage(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_pagestat] sys_pagestat,
+[SYS_cowpage] sys_cowpage,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c37d389 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_pagestat 22
+#define SYS_cowpage 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..e2bee6c 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,12 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+uint64 sys_pagestat(void)
+{
+  printpageStat();
+  return 0;
+}
+uint64 sys_cowpage(void)
+{
+  return numOfCowPage(myproc());
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..1c61309 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+//#include "vm.c"
 
 struct spinlock tickslock;
 uint ticks;
@@ -47,6 +48,79 @@ usertrap(void)
 
   struct proc *p = myproc();
   
+  // save user program counter.
+  p->trapframe->epc = r_sepc();
+
+  uint64 scause=r_scause();
+  if(scause==15)
+  {
+    // printf("Handling page fault\n");
+    uint64 addr=r_stval();
+    pte_t * pte;
+    if(addr>=MAXVA){
+      setkilled(p);
+      goto endd;
+    }
+    if((pte = walk(p->pagetable, addr, 0)) == 0)
+      panic("usertrap: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("usertrap: page not present");
+    if(!(*pte & PTE_COW))
+    {
+      printf("Not a COW page and trying to write to a not writable page\nKilling the process\n");
+      setkilled(p);
+    }
+    else{//copy page update write permission
+      if(remapcow(pte)!=0)
+        panic("usertrap: cannot copy cow page");
+    }
+  }
+  else if(scause == 8){
+    // system call
+
+    if(killed(p))
+      exit(-1);
+
+    // sepc points to the ecall instruction,
+    // but we want to return to the next instruction.
+    p->trapframe->epc += 4;
+
+    // an interrupt will change sepc, scause, and sstatus,
+    // so enable only now that we're done with those registers.
+    intr_on();
+
+    syscall();
+  } else if((which_dev = devintr()) != 0){
+    // ok
+  } else {
+    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+    setkilled(p);
+  }
+  endd:;
+  if(killed(p))
+    exit(-1);
+
+  // give up the CPU if this is a timer interrupt.
+  if(which_dev == 2)
+    yield();
+
+  usertrapret();
+}
+/*void
+usertrap(void)
+{
+  int which_dev = 0;
+
+  if((r_sstatus() & SSTATUS_SPP) != 0)
+    panic("usertrap: not from user mode");
+
+  // send interrupts and exceptions to kerneltrap(),
+  // since we're now in the kernel.
+  w_stvec((uint64)kernelvec);
+
+  struct proc *p = myproc();
+  
   // save user program counter.
   p->trapframe->epc = r_sepc();
   
@@ -81,8 +155,7 @@ usertrap(void)
     yield();
 
   usertrapret();
-}
-
+}*/
 //
 // return to user space
 //
@@ -144,7 +217,26 @@ kerneltrap()
   if(intr_get() != 0)
     panic("kerneltrap: interrupts enabled");
 
-  if((which_dev = devintr()) == 0){
+  struct proc* p=myproc();
+  if(scause==15)
+  {
+    printf("Handling kernel trap write\n");
+    uint64 addr=r_stval();
+    pte_t * pte;
+    if((pte = walk(p->pagetable, addr, 0)) == 0)
+      panic("kerneltrap: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("kerneltrap: page not present");
+    if(!(*pte & PTE_COW))
+    {
+      panic("kerneltrap: kernel trying to write to a non writable non cow page\n");
+    }
+    else{//copy page update write permission
+      if(remapcow(pte)!=0)
+        panic("kerneltrap: cannot copy cow page");
+    }
+  }
+  else if((which_dev = devintr()) == 0){
     printf("scause %p\n", scause);
     printf("sepc=%p stval=%p\n", r_sepc(), r_stval());
     panic("kerneltrap");
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..feb5d02 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,7 +5,12 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
 
+
+
+int refcount[NUM_OF_PAGE];
+struct spinlock reflock;
 /*
  * the kernel's page table.
  */
@@ -53,6 +58,7 @@ kvmmake(void)
 void
 kvminit(void)
 {
+  
   kernel_pagetable = kvmmake();
 }
 
@@ -156,6 +162,16 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
     if(*pte & PTE_V)
       panic("mappages: remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
+    // if(pa>=PHYSTOP)
+    //   panic("mappages: pa > PHYSTOP");
+    // if(pa>=KERNBASE){
+    //   if(PINDX(pa)>=NUM_OF_PAGE){
+    //     printf("%p\n",PINDX(pa));
+    //     printf("phy address %x\n",pa);
+    //     panic("mappages: pa>number of page");
+    //   }
+    //   ++refcount[PINDX(pa)];
+    // }  
     if(a == last)
       break;
     a += PGSIZE;
@@ -183,6 +199,13 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
       panic("uvmunmap: not mapped");
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
+    
+    // int indx=PINDX(pa);
+    // if(indx<0||indx>=NUM_OF_PAGE)
+    //   panic("uvmunmap: indx invalid");
+    // --refcount[indx];
+    // if(refcount[indx]<0)
+    //   panic("uvmunmap: refcount < 0");
     if(do_free){
       uint64 pa = PTE2PA(*pte);
       kfree((void*)pa);
@@ -295,7 +318,97 @@ uvmfree(pagetable_t pagetable, uint64 sz)
     uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
   freewalk(pagetable);
 }
+// allocate new page for copying cow page
+// copies from oldmem to new page
+// then updates pte
+// it also set write flag and clears cow flag
+// returns 0 on success;non zero otherwise
+int remapcow(pte_t* pte)
+{
+  //printf("remap : %p %p\n",pte,*pte);
+  uint64 flags=PTE_FLAGS(*pte);
+  uint64 pa=PTE2PA(*pte);
+  char* newmem;
+
+  if((newmem = (char*)kalloc()) == 0){
+      panic("remap: could not allocate memory\n");
+      return -1;
+  }
+
+
+  memmove(newmem, (char*)pa, PGSIZE);
+  *pte=PA2PTE((uint64)newmem) | (flags&(~PTE_COW)) | PTE_W;
+  // if((uint64)newmem>=PHYSTOP)
+  //   panic("remapcow: newmem> PHYSTOP");
+  // if((uint64)newmem>=KERNBASE){
+  //   if(PINDX((uint64)newmem)>=NUM_OF_PAGE)
+  //   {
+  //      printf("phy address %p\n",newmem);
+  //       panic("remapcow: pa>number of page");
+  //   }
+  //   ++refcount[PINDX((uint64)newmem)];
+  // }
+  if(pa>=PHYSTOP)
+      panic("remap: pa > PHYSTOP");
+  if(pa>=KERNBASE){
+      if(PINDX(pa)>=NUM_OF_PAGE){
+        printf("%p\n",PINDX(pa));
+        printf("phy address %x\n",pa);
+        panic("remap: pa>number of page");
+      }
+      kfree((void*)pa);
+      // if(refcount[PINDX(pa)]>0)
+      //   --refcount[PINDX(pa)];
+      // if(refcount[PINDX(pa)]<=0)
+      //   kfree((void*)pa);
+  }
 
+  //printf("remap : %p %p\n",pte,*pte);
+  return 0;
+}
+// int uvmcopycow(pagetable_t old, pagetable_t new, uint64 sz)
+// {
+//   pte_t *pte;
+//   uint64 i;
+//   uint flags;
+//   char *mem;
+//  // pte_t *pte_child;
+
+//   for(i = 0; i < sz; i += PGSIZE){
+//     if((pte = walk(old, i, 0)) == 0)
+//       panic("uvmcopy: pte should exist");
+//     if((*pte & PTE_V) == 0)
+//       panic("uvmcopy: page not present");
+//     //clear write flag of old pte and mark it as cow page
+//     *pte=(*pte&(~PTE_W))|(PTE_COW);
+
+//     //just get the address of old memory
+//     mem=(char*) PTE2PA(*pte);
+//     //now not writable
+//     flags = PTE_FLAGS(*pte);
+    
+//     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+//       //cannot map 
+//       goto err;
+//     }
+
+//     // pa = PTE2PA(*pte);
+//     // flags = PTE_FLAGS(*pte);
+//     // if((mem = kalloc()) == 0)
+//     //   goto err;
+//     // memmove(mem, (char*)pa, PGSIZE);
+//     // if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+//     //   kfree(mem);
+//     //   goto err;
+//     // }
+//   }
+//   return 0;
+
+//  err:
+//   panic("uvmcopycow:shouldnt be here");
+//   uvmunmap(new, 0, i / PGSIZE, 1);
+//   return -1;
+// }
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -305,6 +418,72 @@ uvmfree(pagetable_t pagetable, uint64 sz)
 int
 uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 {
+  //printf("uvmcopy called 1\n");
+  pte_t *pte;
+  uint64 i;
+  uint flags;
+  char *mem;
+ // pte_t *pte_child;
+  //printf("uvmcopy called 2 %p\n",sz);
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    //clear write flag of old pte and mark it as cow page
+    *pte=(*pte&(~PTE_W))|(PTE_COW);
+
+    //just get the address of old memory
+    mem=(char*) PTE2PA(*pte);
+    //now not writable
+    flags = PTE_FLAGS(*pte);
+    //printf("uvmcopy called 3\n");
+
+    uint64 pa=(uint64)mem;
+    if(pa>=PHYSTOP)
+      panic("mappages: pa > PHYSTOP");
+    if(pa>=KERNBASE){
+      if(PINDX(pa)>=NUM_OF_PAGE){
+        printf("%p\n",PINDX(pa));
+        printf("phy address %x\n",pa);
+        panic("mappages: pa>number of page");
+      }
+      acquire(&reflock);
+      ++refcount[PINDX(pa)];
+      release(&reflock);
+    }
+
+    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+      //cannot map 
+      goto err;
+    }
+    // uvmunmap(old,i,PGSIZE,0);
+    // if(mappages(old, i, PGSIZE, (uint64)pa, flags) != 0){
+    //   //cannot map 
+    //   goto err;
+    // }
+   // printf("uvmcopy called 4\n");
+    // pa = PTE2PA(*pte);
+    // flags = PTE_FLAGS(*pte);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    // if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+    //   kfree(mem);
+    //   goto err;
+    // }
+  }
+  return 0;
+
+ err:
+  //panic("uvmcopycow:shouldnt be here");
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+/*int
+uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  return uvmcopycow(old,new,sz);
   pte_t *pte;
   uint64 pa, i;
   uint flags;
@@ -319,7 +498,8 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
+    memmove(mem, (char*)pa, PGSIZE);\
+    
     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
       kfree(mem);
       goto err;
@@ -330,7 +510,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
  err:
   uvmunmap(new, 0, i / PGSIZE, 1);
   return -1;
-}
+}*/
 
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
@@ -352,15 +532,26 @@ int
 copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
-
+  pte_t* pte;
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
+    pte=(pte_t*)walk(pagetable,va0,0);
+    if(pte==0||((*pte & PTE_V))==0||((*pte & PTE_U)==0))
+      return -1;
+    if (*pte & PTE_COW) {
+      if(remapcow(pte)!=0)
+        panic("copyout: remap");
+      pa0 = walkaddr(pagetable, va0);
+    }
+
     n = PGSIZE - (dstva - va0);
     if(n > len)
       n = len;
+    
+    
     memmove((void *)(pa0 + (dstva - va0)), src, n);
 
     len -= n;
diff --git a/user/openthread.c b/user/openthread.c
new file mode 100644
index 0000000..4e10960
--- /dev/null
+++ b/user/openthread.c
@@ -0,0 +1,42 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])//opens 3 thread each running long loop;
+{
+    int  pid=fork();
+    if(pid<0)
+    {
+        printf("Cannot create child process\n");
+        return 0;
+    }
+    if(pid==0)
+    {
+        exec("thread1",argv);
+    }
+    wait(&pid);
+    pid=fork();
+    if(pid<0)
+    {
+        printf("Cannot create child process\n");
+        return 0;
+    }
+    if(pid==0)
+    {
+        exec("thread3",argv);
+    }
+    wait(&pid);
+    pid=fork();
+    if(pid<0)
+    {
+        printf("Cannot create child process\n");
+        return 0;
+    }
+    if(pid==0)
+    {
+        exec("thread2",argv);
+    }
+    return 0;
+}
diff --git a/user/thread1.c b/user/thread1.c
new file mode 100644
index 0000000..0afb15c
--- /dev/null
+++ b/user/thread1.c
@@ -0,0 +1,18 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    //settickets(1);
+    int count=0;
+    int i;
+    for(i=0;i<1000000;++i)
+    {
+        ++count;
+    }
+    printf("Thread1 counting: %d\n",count);
+    return 0;
+}
diff --git a/user/thread2.c b/user/thread2.c
new file mode 100644
index 0000000..b397dc6
--- /dev/null
+++ b/user/thread2.c
@@ -0,0 +1,18 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    //settickets(1);
+    int count=0;
+    int i;
+    for(i=0;i<1000;++i)
+    {
+        ++count;
+    }
+    printf("Thread2 counting: %d\n",count);
+    return 0;
+}
diff --git a/user/thread3.c b/user/thread3.c
new file mode 100644
index 0000000..337ee9a
--- /dev/null
+++ b/user/thread3.c
@@ -0,0 +1,18 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    //settickets(2);
+    int count=0;
+    int i;
+    for(i=0;i<34323;++i)
+    {
+        ++count;
+    }
+    printf("Thread1 counting: %d\n",count);
+    return 0;
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..a7089fa 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int pagestat(void);
+int cowpage(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/user1.c b/user/user1.c
new file mode 100644
index 0000000..7649b12
--- /dev/null
+++ b/user/user1.c
@@ -0,0 +1,194 @@
+
+#include "kernel/types.h"
+#include "kernel/memlayout.h"
+#include "user/user.h"
+
+// allocate more than half of physical memory,
+// then fork. this will fail in the default
+// kernel, which does not support copy-on-write.
+void
+simpletest()
+{
+  uint64 phys_size = PHYSTOP - KERNBASE;
+  int sz = (phys_size / 3) * 2;
+
+  printf("simple: ");
+  
+  char *p = sbrk(sz);
+  if(p == (char*)0xffffffffffffffffL){
+    printf("sbrk(%d) failed\n", sz);
+    exit(-1);
+  }
+
+  for(char *q = p; q < p + sz; q += 4096){
+    *(int*)q = getpid();
+  }
+
+  int pid = fork();
+  if(pid < 0){
+    printf("fork() failed\n");
+    exit(-1);
+  }
+
+  if(pid == 0)
+    exit(0);
+
+  wait(0);
+
+  if(sbrk(-sz) == (char*)0xffffffffffffffffL){
+    printf("sbrk(-%d) failed\n", sz);
+    exit(-1);
+  }
+
+  printf("ok\n");
+}
+
+// three processes all write COW memory.
+// this causes more than half of physical memory
+// to be allocated, so it also checks whether
+// copied pages are freed.
+void
+threetest()
+{
+  uint64 phys_size = PHYSTOP - KERNBASE;
+  int sz = phys_size / 4;
+  int pid1, pid2;
+
+  printf("three: ");
+  
+  char *p = sbrk(sz);
+  if(p == (char*)0xffffffffffffffffL){
+    printf("sbrk(%d) failed\n", sz);
+    exit(-1);
+  }
+
+  pid1 = fork();
+  if(pid1 < 0){
+    printf("fork failed\n");
+    exit(-1);
+  }
+  if(pid1 == 0){
+    pid2 = fork();
+    if(pid2 < 0){
+      printf("fork failed");
+      exit(-1);
+    }
+    if(pid2 == 0){
+      for(char *q = p; q < p + (sz/5)*4; q += 4096){
+        *(int*)q = getpid();
+      }
+      for(char *q = p; q < p + (sz/5)*4; q += 4096){
+        if(*(int*)q != getpid()){
+          printf("wrong content\n");
+          exit(-1);
+        }
+      }
+      exit(-1);
+    }
+    for(char *q = p; q < p + (sz/2); q += 4096){
+      *(int*)q = 9999;
+    }
+    exit(0);
+  }
+
+  for(char *q = p; q < p + sz; q += 4096){
+    *(int*)q = getpid();
+  }
+
+  wait(0);
+
+  sleep(1);
+
+  for(char *q = p; q < p + sz; q += 4096){
+    if(*(int*)q != getpid()){
+      printf("wrong content\n");
+      exit(-1);
+    }
+  }
+
+  if(sbrk(-sz) == (char*)0xffffffffffffffffL){
+    printf("sbrk(-%d) failed\n", sz);
+    exit(-1);
+  }
+
+  printf("ok\n");
+}
+
+char junk1[4096];
+int fds[2];
+char junk2[4096];
+char buf[4096];
+char junk3[4096];
+
+// test whether copyout() simulates COW faults.
+void
+filetest()
+{
+  printf("file: ");
+  
+  buf[0] = 99;
+
+  for(int i = 0; i < 4; i++){
+    if(pipe(fds) != 0){
+      printf("pipe() failed\n");
+      exit(-1);
+    }
+    int pid = fork();
+    if(pid < 0){
+      printf("fork failed\n");
+      exit(-1);
+    }
+    if(pid == 0){
+      sleep(1);
+      if(read(fds[0], buf, sizeof(i)) != sizeof(i)){
+        printf("error: read failed\n");
+        exit(1);
+      }
+      sleep(1);
+      int j = *(int*)buf;
+      if(j != i){
+        printf("error: read the wrong value\n");
+        exit(1);
+      }
+      exit(0);
+    }
+    if(write(fds[1], &i, sizeof(i)) != sizeof(i)){
+      printf("error: write failed\n");
+      exit(-1);
+    }
+  }
+
+  int xstatus = 0;
+  for(int i = 0; i < 4; i++) {
+    wait(&xstatus);
+    if(xstatus != 0) {
+      exit(1);
+    }
+  }
+
+  if(buf[0] != 99){
+    printf("error: child overwrote parent\n");
+    exit(1);
+  }
+
+  printf("ok\n");
+}
+
+int
+main(int argc, char *argv[])
+{
+  simpletest();
+
+  // check that the first simpletest() freed the physical memory.
+  simpletest();
+
+  threetest();
+  threetest();
+  threetest();
+
+  filetest();
+
+  printf("ALL COW TESTS PASSED\n");
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/userforktest.c b/user/userforktest.c
new file mode 100644
index 0000000..a991301
--- /dev/null
+++ b/user/userforktest.c
@@ -0,0 +1,40 @@
+// Test that fork fails gracefully.
+// Tiny executable so that the limit can be filling the proc table.
+
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+#define N  1000
+char memory[100]="cccccccccccccccccccccc";
+int main(int argc, char *argv[]) {
+//printf("hello world\n");
+int rc = fork();
+if (rc < 0) {
+// fork failed
+printf("fork failed\n");
+exit(1);
+} else if (rc == 0) {
+// child (new process)
+    pagestat();
+    printf("hello, I am child\n");
+    for(int i=0;i<4;++i)
+        memory[i]='a';
+    printf("childs memory %s\n",memory);
+    printf("%d\n",strlen(memory));
+    printf("after writing to child memory\n");
+    pagestat();
+} else {
+    wait(&rc);
+    pagestat();
+    // parent goes down this path (main)
+    printf("hello, I am parent\n");
+    for(int i=5;i<10;++i)
+        memory[i]='d';
+    printf("parent's memory %s\n",memory);
+    printf("%d\n",strlen(memory));
+    pagestat();
+}
+return 0;
+}
\ No newline at end of file
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..8b7ed15 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("pagestat");
+entry("cowpage");
